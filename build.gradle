buildscript {
    ext {
        kotlinVersion = "1.3.20"
        springBootVersion = "2.1.2.RELEASE"
        dokkaVersion = "0.9.17"
        springIntegrationVersion = "5.1.2.RELEASE"
        asciiDoctorVersion = "1.5.3"
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${asciiDoctorVersion}"
    }
}

ext {
    keycloakVersion = "4.8.3.Final"
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: 'kotlin-jpa'
apply plugin: "org.jetbrains.dokka"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.asciidoctor.convert"

group = "org.oso"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.integration:spring-integration-core"
    implementation "org.springframework.integration:spring-integration-ip"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.postgresql:postgresql"
//    implementation "org.keycloak:keycloak-spring-boot-starter:$keycloakVersion"
//    implementation "org.keycloak:keycloak-spring-security-adapter:$keycloakVersion"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testRuntime "org.junit.vintage:junit-vintage-engine"
    testRuntime "com.h2database:h2:1.4.197"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

bootRun {
    jvmArgs = ["-Dspring.profiles.active=local"]
}

task bootRunDev(dependsOn:bootRun) {
    group "application"

    gradle.taskGraph.whenReady {
        if (it.hasTask(bootRunDev)) {
            bootRun {
                jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n"]
            }
        }
    }
}

asciidoctor {
    sourceDir 'src/main/asciidoc'
    attributes 'snippets': file('target/snippets'),
                'encoding': 'UTF-8'
}